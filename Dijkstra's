class MinHeap <T extends Comparable>
{
    ArrayList <T> arr = new ArrayList<T>();

    void insert(T value) {
        // add value to end
        arr.add(value);
        int curr = arr.size() - 1;
        // sift the value up
        int parent = ( curr - 1 ) / 2;
        while (parent >= 0 && arr.get(curr).compareTo(arr.get(parent)) < 0){
            T temp = arr.get(curr);
            arr.set(curr, arr.get(parent));
            arr.set(parent, temp);
            curr = parent;
            parent = ( curr - 1 ) / 2;
        }
    }

    /**
     * delete the top of the heap and return it
     * @return object at the top of the heap or null if heap is empty
     */
    T delete() {
        if (arr.size() == 0) return null;

        T returnMe = arr.get(0);

        // replace root with last element
        arr.set(0, arr.get(arr.size() - 1));
        //remove the last element
        arr.remove(arr.size() - 1);

        int curr = 0;

        // sift down
        boolean done = false;
        while (!done) {
            int leftChild = curr * 2 + 1;
            int rightChild = curr * 2 + 2;
            int swapChild = arr.size() - 1 ;
            if (leftChild >= arr.size()) {
                done = true;
            } else if (rightChild >= arr.size() ||
            arr.get(leftChild).compareTo(arr.get(rightChild)) < 0) {
                // left child is smaller
                swapChild = leftChild;
            } else {
                // right child is smaller
                swapChild = rightChild;
            }

            if (!done && arr.get(swapChild).compareTo(arr.get(curr)) < 0) {
                T temp = arr.get(curr);
                arr.set(curr,arr.get(swapChild));
                arr.set(swapChild, temp);
                curr = swapChild;
            } else {
                done = true;
            }
        }

        return returnMe;
    }

    /**
     * return the object at the top of the heap without deleting
     * @return object at top of heap or null if heap is empty
     */
    T peek() {
        if (arr.size() == 0) return null;
        return arr.get(0);
    }
}
class Edge // Class to store edges of the graph
{
    int source, dest, dist;

    public Edge(int source, int dest, int dist) {
        this.source = source;
        this.dest = dest;
        this.dist = dist;
    }
};

// data structure to store heap nodes
class DijkstraHeapNode implements Comparable{

    int node;
    int tDist;

    public DijkstraHeapNode(int node, int tDist) {
        this.node= node;
        this.tDist= tDist;
    }

    public int compareTo(Object o){
        DijkstraHeapNode d = (DijkstraHeapNode) o;
        if (tDist== d.tDist) return 0;
        else if (tDist < d.tDist) return -1;
        else return 1;
    }
};

// class to represent a matrix object
class Matrix
{

    List<List<Edge>> adjList = null;

    // Constructor
    Matrix(List<Edge> edges, int N)
    {
        adjList = new ArrayList<>(N);

        for (int i = 0; i < N; i++) {
            adjList.add(i, new ArrayList<>());
        }

        // add edges to the undirected matrix
        for (Edge edge: edges) {
            adjList.get(edge.source).add(edge);
        }
    }
}

public class Dijkstra
{
    //displays the shortest path for a given node in a recursive manner
    private static void printShortestPath(int prev[], int i)
    {
        if (i < 0)
        return;

        printShortestPath(prev, prev[i]);
        System.out.print(i + " ");
    }

    // Run Dijkstra's algorithm on given graph
    public static void shortestPath(Matrix matrix, int N, int startNode, int endNode)
    {
        // create min heap and push source node having distance 0
        MinHeap<DijkstraHeapNode> minHeap = new MinHeap<DijkstraHeapNode>();
        minHeap.insert(new DijkstraHeapNode(startNode, 0));

        // set infinite distance from source for all vertices
        List<Integer> dist = new ArrayList<>(Collections.nCopies(N, Integer.MAX_VALUE));
        dist.set(startNode,0);

        // boolean array to track vertices for which minimum distance already found

        boolean[] done = new boolean[N];
        done[startNode] = true;

        // stores predecessor of a vertex (to print path)
        int prev[] = new int[N];
        prev[startNode] = -1;

        // run till minHeap is not empty
        while (!minHeap.arr.isEmpty())
        {
            // Remove and return best vertex
            DijkstraHeapNode dijkstraHeapNode= minHeap.delete();

            // get vertex number
            int vertex = dijkstraHeapNode.node;

            // do for each neighbor v of u
            for (Edge edge: matrix.adjList.get(vertex))
            {
                int v = edge.dest;
                int distance = edge.dist;

                // logic to insert child node into the heap
                if (!done[v] && (dist.get(vertex) + distance) < dist.get(v))
                {
                    dist.set(v, dist.get(vertex) + distance);
                    prev[v] = vertex;
                    minHeap.insert(new DijkstraHeapNode(v, dist.get(v)));
                }
            }

            // vertex u as done so it will not get picked up again
            done[vertex] = true;
        }

        System.out.print("The shortest path from start node " + startNode + " to end node " + endNode + " has distance of "
            + dist.get(endNode) + " and the path is { ");
        printShortestPath(prev, endNode);
        System.out.println("}");

    }

    public static void main(String[] args) throws IOException
    {
        System.out.println("Welcome to Dijkstra's Town ");
        String path = "graphs.txt";
        FileReader fr = new FileReader(new File(path));
        BufferedReader br = new BufferedReader(fr);

        System.out.println("");
        System.out.println("File Reading Complete !");
        System.out.println();

        //Set the number of vertices
        final int vertices = Integer.parseInt(br.readLine());
        List<Edge> edges = new ArrayList<>();

        // initialize edges as per above diagram
        // (u, v, w) triplet represent undirected edge from
        // vertex u to vertex v having distance w

        for ( int i = 0 ; i < vertices; i++){
            String line = br.readLine();
            String[] lineValues = line.split(" ");
            for(int j = 0 ; j < lineValues.length; j++ ){
                int dist = Integer.parseInt(lineValues[j]);
                if(dist == -0 || dist == -1)
                    continue;
                Edge edge = new Edge(i,j,dist);
                edges.add(edge);
            }
        }

        // for(Edge edge : edges){
        //  System.out.println( edge.source + "," + edge.dest + "," + edge.dist);
        //  }

        while (true) {
            BufferedReader gr = new BufferedReader(new InputStreamReader(System.in));
            System.out.println();
            System.out.println("What node to start at (-1 to quit)");
            int startNode = Integer.parseInt(gr.readLine());
            if (startNode == -1) {
                System.out.println("Goodbye !");
                break;
            }
            System.out.println("What node to end at (-1 to quit)");
            int endNode = Integer.parseInt(gr.readLine());
            if (endNode == -1) {
                System.out.println("Goodbye !");
                break;
            }

            //construct Graphs to store edges and vertices
            Matrix matrix = new Matrix(edges, vertices);
            // calculates the shortest path for a given start and end node for a graph and vertices
            shortestPath(matrix, vertices, startNode, endNode);

        }
        //close the streams
        fr.close();
        br.close();

    }
}
